---
import Logo from "@components/Logo.astro";
import menu from "@config/menu.json";

import LanguageSelector from "./LanguageSelector.astro"
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from '@i18n/utils';

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const { currentLocale } = Astro
---

<header  class="header">
  <nav  class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo/>
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden dark:text-black"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1 dark:text-black"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
       
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2"
    >
      {
        main.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li
                class="nav-item nav-dropdown group relative cursor-pointer gap-0"
                id="dropdown-button"
              >
                <a
                  href={getRelativeLocaleUrl(currentLocale ?? '',`${menu.url}`)}
                  class={`nav-link peer inline-flex items-center mx-2 px-[8px] ${
                    (
                      (pathname === `${menu.url}/` || pathname === menu.url || pathname.startsWith(`${menu.url}/`)) ||
                      (currentLocale === 'en' && (pathname === `/en${menu.url}/` || pathname === `/en${menu.url}` || pathname.startsWith(`/en${menu.url}/`)))
                    ) &&
                    "active"
                  }`}
                >
                  {t(`nav.${menu.name.toLowerCase()}`)}
                </a>
                <div class={`nav-link peer-hover:text-primary inline-flex items-center align-middle px-0 lg:absolute inset-y-0 lg:-right-1`}
                >
                  <svg class="h-4 w-4 fill-current " viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </div>
                {/* Dropdown cambio de posicion (nav-dropdown-list) tama√±o, color de fondo, etc*/}
                <ul
                  id="dropdown"
                  class="lg:p-8  nav-dropdown-list hidden duration-400  lg:invisible lg:absolute lg:-left-[18rem] lg:top-12           lg:h-[300px] lg:w-[666px] mx-auto w-[13.5rem] lg:flex lg:flex-row lg:gap-8             lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100"
                >
                
                  <div class=" lg:flex lg:flex-col lg:divide-y lg:justify-center lg:w-1/2">
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={getRelativeLocaleUrl(currentLocale ?? '',`${child.url}`)}
                        class={`py-2 lg:pt-3 lg:h-[85px] items-center nav-dropdown-link block ${
                          (
                            (pathname === `${child.url}/` || pathname === child.url) ||
                            (currentLocale === 'en' && (pathname === `/en${child.url}/` || pathname === `/en${child.url}`))
                          ) &&
                          "text-primary"
                        }`}
                      >
                        <div class="text-center flex flex-row gap-2 lg:justify-start justify-center items-center ">
                          {console.log(child.name.toLowerCase())}
                          {t(`nav.${child.name.toLowerCase()}`)}
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25 21 12m0 0-3.75 3.75M21 12H3" />
                        </svg>
                        </div>
                        <p class="hidden lg:mt-1 lg:text-gray-500 lg:inline-block">
                          Trending wallpapers for any kind of tatse
                        </p>
                      </a>

                    </li>
                  ))}
                  </div>
                  <div class="hidden lg:w-1/2 lg:h-full lg:inline-block">
                    <div class="bg-black  lg:p-5 rounded-xl space-y-4 h-full flex flex-col justify-center ">
                      <div >
                        <p class="text-xl text-white tracking-tight text-balance">
Use the code LEXINGTON30 and <span class="text-gray-400">get a 30% discount on the bundle.</span> 
                        </p>
                      </div>
                      <a 
                        href={getRelativeLocaleUrl(currentLocale ?? '',`/products`)}
                        class="nav-link items-center text-sm group active:bg-gray-100 active:text-gray-900/60 active:transition-none border font-medium flex flex-row justify-center gap-2 outline-offset-2 px-6 py-3 transition w-full bg-white hover:bg-gray-50 text-black rounded-lg">
                        <p>Products</p>
                        <span>
                          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25 21 12m0 0-3.75 3.75M21 12H3" />
                          </svg>
                        </span> 
                      </a>  
                    </div>
                  </div>
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a
                  href={getRelativeLocaleUrl(currentLocale ?? '',`${menu.url}`)}
                  class={`nav-link inline-block lg:block mx-4 ${
                    (
                      (pathname === `${menu.url}/` || pathname === menu.url) ||
                      (currentLocale === 'en' && (pathname === `/en${menu.url}/` || pathname === `/en${menu.url}`))
                    ) &&
                    "active"
                  }`}
                >
                  {t(`nav.${menu.name.toLowerCase()}`)}
                </a>
              </li>
            )}
          </>
        ))
      }
      <li class="nav-item mt-4 lg:hidden flex flex-row items-center justify-center gap-4	">
        <!-- Language button Mobile-->
        <LanguageSelector/>
        <!-- Language button -->

        <!-- Toggle theme mode Mobile-->
        <button data-switch-theme_mobile class="outline-none bg-default flex relative text-heading-2 rounded-full m-2 p-1 lg:p-2">
          <svg xmlns="http://www.w3.org/2000/svg" fill="white" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 dark:hidden">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
            <title>Switch to Dark Mode</title> 
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" fill="black" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 dark:flex hidden dark:text-white">
            <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
            <title>Switch to Light Mode</title> 
          </svg>               
          <span class="sr-only">switch theme</span>
        </button>
      </li>
    </ul>
    <div class="order-1 ml-auto hidden items-center md:order-2 md:ml-0 lg:flex">
      <!-- Language button Full page-->
      <LanguageSelector/>
      <!-- Language button -->

      <!-- Toggle theme mode Full page-->
      <button data-switch-theme class="outline-none bg-default flex relative text-heading-2 rounded-full m-2 p-1 lg:p-2">
          
        <svg xmlns="http://www.w3.org/2000/svg" fill="white" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 dark:hidden">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
          <title>Switch to Dark Mode</title>  
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" fill="black" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 dark:flex hidden dark:text-white ">
          <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
          <title>Switch to Light Mode</title> 
        </svg>
                        
        <span class="sr-only">switch theme</span>
      </button>

    </div>
    
  </nav>
</header>

<script> 
  //Se cambio <script is:inline> por solo <script>
  
  function button_2() {  
  const button = document.getElementById("dropdown-button");
  button.addEventListener("click", () => {
    const dropdown = document.getElementById("dropdown");
    dropdown.classList.toggle(dropdown.style === "hidden" ? "block" : "hidden");
  });
  }
  button_2()
  //sticky header

  function header_2() {  
  const header = document.querySelector(".header");
  window.addEventListener("scroll", () => {
    const scrollY = window.scrollY;
    if (scrollY > 0) {
      header.classList.add("header-sticky");
    } else {
      header.classList.remove("header-sticky");
    }
  });
  }
  header_2()

  document.addEventListener('astro:after-swap', button_2);
  document.addEventListener('astro:after-swap', header_2);
</script>
