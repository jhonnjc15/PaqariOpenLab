---
import Blogs from "@components/Blogs.astro";
import PageHeader from "@components/PageHeader.astro";
import Shape from "@components/Shape.astro";
import ProductsList from "@components/products/ProductsList.astro";
import config from "@config/config.json";
import Base from "@layouts/Base.astro";
import Pagination from "@layouts/components/Pagination.astro";
import { getSinglePage } from "@lib/contentParser.astro";
import { sortByDate } from "@lib/utils/sortFunctions";
import { getEntryBySlug } from "astro:content";
import categories_data from "@data/categories.json"

import productsJson from "@data/products.json";


export async function getStaticPaths() {
  const paths = [];

  categories_data.forEach((category) => {
    const filtered = productsJson.filter(
      (product) => product.category === category.category_name && !product.featured
    );

    const totalPages = Math.ceil(filtered.length / config.settings.pagination);

    for (let i = 1; i <= totalPages; i++) {
      paths.push({
        params: {
          category: category.category_name,
          slug: i.toString(),
        },
      });
    }
  });

  return paths;
}

const { category, slug } = Astro.params;

const blogIndex = await getEntryBySlug<any, string>(
  config.settings.product_folder,
  `-${category}`
);
const { title, page_title, product_list } = blogIndex.data;
//console.log(slug)
//console.log(category)

// Mapear productos desde JSON
const posts = productsJson.map((product) => ({
  data: product,
  slug: `product-${product.id_product}`,
}));

const recentProduct = posts.filter((item) => !item.data.featured);
//const posts = productsJson.filter((product) => !product.featured);
// console.log('posts')
// console.log(posts)


const recentPost_category = recentProduct.filter(
  (item) => item.data.category === category
);

//const sortedPosts = sortByDate(posts);
//const recentPost = sortedPosts.filter((item) => !item.data.featured);
//const recentPost_category = recentPost.filter((item) => item.data.category===`${category}`);
const totalPages = Math.ceil(recentPost_category.length / config.settings.pagination);
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = recentPost_category.slice(indexOfFirstPost, indexOfLastPost);
console.log('currentPosts')
console.log(currentPosts)

const page_data = {
  index_title: blogIndex.data.title,
  slug: `page / ${slug}`,
  index_path: `${config.settings.product_folder}/${blogIndex.data.title.toLowerCase()}`
};
//console.log(page_data)

const product_folder_category = `${config.settings.product_folder}/${category}` 

---

<Base
  title={blogIndex.data.title}
  meta_title={blogIndex.data.meta_title}
  description={blogIndex.data.description}
  image={blogIndex.data.image}
>
  <Shape />
  <section class="page-hero pt-16">
    <div class="container">
      <PageHeader page_data={page_data} />
    </div>
  </section>
  <section class="border border-red-700 section mx-4 md:mx-10 lg:mx-20 mt-12">
    <ProductsList 
      products={currentPosts} 
      product_list={product_list}
    />
    <Pagination
const product_folder_category = `${config.settings.product_folder}/${category}` 
        section={product_folder_category}
        totalPages={totalPages}
        currentPage={currentPage}
      />
  </section>
</Base>
