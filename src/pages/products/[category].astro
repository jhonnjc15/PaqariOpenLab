---
import type { GetStaticPaths } from "astro";
import categories_data from "../../data/categories.json"
import type { List } from "postcss/lib/list";


import PageHeader from "@components/PageHeader.astro";
import Shape from "@components/Shape.astro";
import Base from "@layouts/Base.astro";
import Faq from "@layouts/function-components/Faq.jsx";
import { getEntryBySlug } from "astro:content";
import ProductsExperiences from "@components/products/ProductsExperiences.astro"

import Products from "@components/products/Products.astro";
import Blogs from "@components/Blogs.astro";
import config from "@config/config.json";
import Pagination from "@layouts/components/Pagination.astro";
import { getSinglePage } from "@lib/contentParser.astro";
import { sortByDate } from "@lib/utils/sortFunctions";




interface Category {
  name: string;
  // Otros campos si los hay
}

function get_category_data_by_id({ name }) {
  // Importa el archivo JSON directamente (asegúrate de que la ruta sea correcta)
  console.log(name);
  
  // Busca la categoría por el nombre
  const category = categories_data.find((category) => category.category_name === name);
  //console.log(category);

  // Devuelve la categoría si se encuentra, o null si no hay coincidencia
  return category || null;
}



const { category } = Astro.params;
console.log(category)

let category_by_name
const categoryByName: Category = { name: category };

if (category) {
  category_by_name = get_category_data_by_id(categoryByName);
}

export const getStaticPaths = (() => {
  const all_categories = categories_data;
  const allCategories = all_categories.map((category) => ({
    params: {
      category: category.category_name,
    }
  }));
  return allCategories
});
console.log(category_by_name.category_name)





const { product_folder } = config.settings; // "products"
const posts = await getSinglePage(product_folder);
const sortedPosts = sortByDate(posts);
const recentPost = sortedPosts.filter((item) => !item.data.featured);
const recentPost_category = recentPost.filter((item) => item.data.category===`${category_by_name.category_name}`);
const totalPages = Math.ceil(recentPost_category.length / config.settings.pagination);
const currentPosts = recentPost_category.slice(0, config.settings.pagination);

console.log(sortedPosts)
console.log(currentPosts)
console.log(product_folder)


const products = await getEntryBySlug("products", `-${category_by_name.category_name}`);
console.log(products)
const page_data = {
  ...products.data,
  content: products.body,
};
console.log(page_data)

const product_folder_category = `${product_folder}/${category_by_name.category_name}` 

---

<Base
  title={products.data.title}
  meta_title={products.data.meta_title}
  description={products.data.description}
  image={products.data.image}
>
  <Shape />
  <section class="page-hero pb-4 pt-16">
    <div class="container">
      <PageHeader page_data={page_data} />
    </div>
  </section>
  <!-- products -->
  <section class="border border-red-700 section mt-12 pt-0 mx-10">
    <h2 class="h4 mb-4">Recent Posts</h2>
    
    <Products products={currentPosts} />
    
    <Pagination
      section={product_folder_category}
      currentPage={1}
      totalPages={totalPages}
    />
  </section>
  {/*
  <Faq client:load data={products.data} />
   */}
</Base>